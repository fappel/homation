import org.openhab.core.library.types.*

import org.eclipse.xtext.xbase.lib.*

import java.util.concurrent.locks.*

val Lock lock = new ReentrantLock()
var boolean ps4Alive = false
var int ps4OffCount = 0
var int tvOffCount = 0

val Functions$Function1 usePs4AsTvSource = [ OnOffType switchState |
  sourceSelect.sendCommand( switchState )
  createTimer( now.plusSeconds( 1 ) ) [|
    usePS4.sendCommand( switchState )
  ]
  return null
]

rule "Wait for Initialization"
when
  System started
then
  lock.lock
  try {
  	postUpdate( tvStatus, OFF )
  	postUpdate( tvPower, OFF )
  	postUpdate( usePS4, OFF )
    postUpdate( tvRulesReady, ON )
    logInfo( "tv", "TV rules wait for rule system initialization..." )
  } finally {
    lock.unlock
  }
end

rule "TV Power ON"
when
  Item tvPower changed from OFF to ON
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      tvOffCount = 0
      if( tvStatus.state == OFF ) {
        logInfo( "tv", "TV has been switched on" )
   	    postUpdate( tvStatus, ON )
   	  }
    } finally {
      lock.unlock	
    }
  }
end

rule "TV Power OFF"
when
  Item tvPower received update
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      if( tvPower.state == OFF ) {
        tvOffCount = tvOffCount + 1
      } else {
      	tvOffCount = 0
      }
      if( tvStatus.state == ON && tvOffCount >= 3 && tvPower.state == OFF ) {
        logInfo( "tv", "TV has been switched off" )
  	    postUpdate( tvStatus, OFF )
      }
    } finally {
      lock.unlock
    }
  }
end

rule "PS4 Activation with TV Available"
when
  Item playStationStatus changed from OFF to ON
then
  if( initialized.state == ON ) {
  	logInfo( "tv", "Playstation has been switched on" )
    lock.lock
    try {
      ps4OffCount = 0
      ps4Alive = true
      if( tvStatus.state == ON && usePS4.state == OFF ) {
        logInfo( "tv", "Switch TV source to Playstation" )
	    usePs4AsTvSource.apply( OFF )
        createTimer( now.plusSeconds( 3 ) ) [|
	      usePs4AsTvSource.apply( ON )
        ]
      }
    } finally {
      lock.unlock
    }
  }
end

rule "TV Activation with Playstation Available"
when
  Item tvStatus changed from OFF to ON
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      if( playStationStatus.state == ON ) {
        logInfo( "tv", "Switch TV source to Playstation" )
        usePs4AsTvSource.apply( OFF )
        createTimer( now.plusSeconds( 4 ) ) [|
          usePs4AsTvSource.apply( ON )
        ]
      }
    } finally {
      lock.unlock
    }
  }
end

rule "PS4 Deactivation"
when
  Item playStationStatus received update
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      if( playStationStatus.state == OFF ) {
        ps4OffCount = ps4OffCount + 1
      } else {
      	ps4OffCount = 0
      }
      if( ps4Alive && ps4OffCount >= 3 && playStationStatus.state == OFF ) {
        logInfo( "tv", "Playstation has been switched off" )
        if( tvStatus.state == ON && usePS4.state == ON ) {
          logInfo( "tv", "Switch TV source to television" )
          usePs4AsTvSource.apply( OFF )
        }
        if( tvStatus.state == OFF ) {
          postUpdate( usePS4, OFF )
        }
        ps4Alive = false
      }
    } finally {
      lock.unlock
    }
  }
end