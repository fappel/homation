import org.openhab.core.library.types.*

import org.eclipse.xtext.xbase.lib.*

import java.util.concurrent.locks.*

val Lock lock = new ReentrantLock()

val Functions$Function1 usePs4AsTvSource = [ OnOffType switchState |
  sourceSelect.sendCommand( switchState )
  createTimer( now.plusSeconds( 2 ) ) [|
    usePS4.sendCommand( switchState )
  ]
  return null
]

rule "Wait for Initialization"
when
  System started
then
  lock.lock
  try {
  	postUpdate( tvStatus, OFF )
  	postUpdate( usePS4, OFF )
    postUpdate( tvRulesReady, ON )
    logInfo( "tv", "TV rules wait for rule system initialization..." )
  } finally {
    lock.unlock
  }
end

rule "TV Power ON"
when
  Item tvPower changed from OFF to ON
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      if( tvStatus.state == OFF ) {
        logInfo( "tv", "TV has been switched on" )
   	    postUpdate( tvStatus, ON )
   	  }
    } finally {
      lock.unlock	
    }
  }
end

rule "TV Power OFF"
when
  Item tvPower changed from ON to OFF
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      if( tvStatus.state == ON ) {
        createTimer( now.plusSeconds( 10 ) ) [|
          if( tvPower.state == OFF ) {
            logInfo( "tv", "TV has been switched off" )
  	        postUpdate( tvStatus, OFF )
          }
        ]
      }
    } finally {
      lock.unlock
    }
  }
end

rule "PS4 Activation with TV Available"
when
  Item playStationStatus changed from OFF to ON
then
  if( initialized.state == ON ) {
  	logInfo( "tv", "Playstation has been switched on" )
    lock.lock
    try {
      if( tvStatus.state == ON && usePS4.state == OFF ) {
        logInfo( "tv", "Switch TV source to Playstation" )
	    usePs4AsTvSource.apply( OFF )
        createTimer( now.plusSeconds( 2 ) ) [|
	      usePs4AsTvSource.apply( ON )
        ]
      }
    } finally {
      lock.unlock
    }
  }
end

rule "TV Activation with Playstation Available"
when
  Item tvStatus changed from OFF to ON
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      if( playStationStatus.state == ON ) {
        logInfo( "tv", "Switch TV source to Playstation" )
        usePs4AsTvSource.apply( OFF )
        createTimer( now.plusSeconds( 1 ) ) [|
          usePs4AsTvSource.apply( ON )
        ]
      }
    } finally {
      lock.unlock
    }
  }
end

rule "PS4 Deactivation"
when
  Item playStationStatus changed from ON to OFF
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      createTimer( now.plusSeconds( 10 ) ) [|
        if( playStationStatus.state == OFF ) {
          logInfo( "tv", "Playstation has been switched off" )
          if( tvStatus.state == ON && usePS4.state == ON ) {
            logInfo( "tv", "Switch TV source to television" )
            usePs4AsTvSource.apply( OFF )
          }
          if( tvStatus.state == OFF ) {
          	postUpdate( usePS4, OFF )
          }
        }
      ]
    } finally {
      lock.unlock
    }
  }
end