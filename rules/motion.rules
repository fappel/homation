import org.openhab.core.library.types.*
import org.openhab.core.library.items.*
import org.openhab.core.items.*

import org.eclipse.xtext.xbase.lib.*

import org.joda.time.*

import java.lang.*
import java.util.*
import java.util.concurrent.locks.*

val Lock lock = new ReentrantLock()
val List motionActivations = newArrayList()

val Functions$Function1 mustActivateRoom = [ GroupItem room |
  val allOthersClosed = newArrayList( true )
  ROOMS.members.forEach[ otherRoom |
  	if( otherRoom != room ) {
  	  var otherRoomClosed = ( otherRoom as GroupItem ).members.get( 3 ).state == CLOSED
      allOthersClosed.set( 0, allOthersClosed.get( 0 ) && otherRoomClosed )
  	}
  ]
  return    !activeRoom.state.equals( room.name )
         && ( room as GroupItem ).members.get( 3 ).state == OPEN
         && allOthersClosed.get( 0 )
]

val Functions$Function1 updateRoomActivation = [ Functions$Function1 mustActivateRoom |
  ROOMS.members.forEach[ room |
    if( mustActivateRoom.apply( room as GroupItem ) as Boolean ) {
     postUpdate( activeRoom, room.name as String )
    }
  ]
  return true
]

val Functions$Function1 updateMotionActivations = [ List motionActivations |
  val active = newArrayList( false )
  ROOMS.members.forEach[ item |
  	var room = item as GroupItem
    var motion = room.members.get( 3 ) as ContactItem
    active.set( 0, active.get( 0 ) || motion.state == OPEN )
  ]
  if( active.get( 0 ) ) {
  	motionActivations.add( now )
  }
  val toRemove = newArrayList()
  motionActivations.forEach[ item |
  	if( ( item as DateTime ).plusMinutes( 5 ).beforeNow ) {
      toRemove.add( item )
  	}
  ]
  toRemove.forEach[ item |
    motionActivations.remove( item as DateTime )
  ]
  return motionActivations
]

val Functions$Function1 updateActivityRate = [ List motionActivations |
  var currentRate = Math::min( 100, motionActivations.size() * 100 / 150 )
  if( ( activityRate.state as DecimalType ).intValue() != currentRate ) {
    postUpdate( activityRate, currentRate )
  }
]

rule "Wait for Initialization"
when
  System started
then
  lock.lock
  try {
    postUpdate( motionRulesReady, ON )
    logInfo( "motion", "Motion rules wait for rule system initialization..." )
  } finally {
    lock.unlock	
  }
end

rule "Kitchen Motion"
when
  Item kitchenMotion changed
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      if( kitchenMotion.state == OPEN && !activeRoom.state.equals( KITCHEN.name ) ) {
        postUpdate( activeRoom, KITCHEN.name )
      }
    } finally {
      lock.unlock	
    }
  }
end

rule "Living Room Motion"
when
  Item livingRoomMotion changed
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      if( livingRoomMotion.state == OPEN && !activeRoom.state.equals( LIVING_ROOM.name ) ) {
        postUpdate( activeRoom, LIVING_ROOM.name )
      }
    } finally {
      lock.unlock	
    }
  }
end

rule "Bedroom Motion"
when
  Item bedRoomMotion changed
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      if( bedRoomMotion.state == OPEN && !activeRoom.state.equals( BED_ROOM.name ) ) {
        postUpdate( activeRoom, BED_ROOM.name )
      }
    } finally {
      lock.unlock	
    }
  }
end

rule "Bathroom Motion"
when
  Item bathRoomMotion changed
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      if( bathRoomMotion.state == OPEN && !activeRoom.state.equals( BATH_ROOM.name ) ) {
        postUpdate( activeRoom, BATH_ROOM.name )
      }
    } finally {
      lock.unlock	
    }
  }
end

rule "Hall Motion"
when
  Item hallMotion changed
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      if( hallMotion.state == OPEN && !activeRoom.state.equals( HALL.name ) ) {
        postUpdate( activeRoom, HALL.name )
      }
    } finally {
      lock.unlock	
    }
  }
end

rule "Activity Rate Gain"
when
  Item activityRate changed
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      if(   ( activityRate.state as DecimalType ).intValue() > 50
          && sceneSelection.members.get( 0 ).equals( IDLE_PERIOD )
  	      && !activeRoom.state.equals( "NONE" ) )
      {
  	    postUpdate( activeScene, STANDARD.name )
  	    postUpdate( illuminateAllRoomsTimeout, 0 )
      }
    } finally {
      lock.unlock	
    }
  }
end

rule "Activation Update"
when
  Time cron "0/2 * * * * ?"
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      updateRoomActivation.apply( mustActivateRoom )
      updateMotionActivations.apply( motionActivations ) as List
    } finally {
      lock.unlock	
    }
  }
end

rule "Activity Rate Update"
when
  Time cron "0/10 * * * * ?"
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      updateActivityRate.apply( motionActivations )
    } finally {
      lock.unlock	
    }
  }
end