import org.openhab.core.library.types.*
import org.openhab.core.library.items.*
import org.openhab.core.items.*
import org.openhab.core.types.*

import org.eclipse.xtext.xbase.lib.*

import java.util.concurrent.locks.*

val Lock lock = new ReentrantLock()

val Functions$Function0 defineBulbExclusions = [|
  ROOMS.members.forEach[ roomItem |
    var room = roomItem as GroupItem
    var roomSwitch = room.members.get( 0 ) as GroupItem
    roomSwitch.members.forEach[ switchItem | ALL_OFF_BULB_EXCLUSIONS.members.add( switchItem ) ]
  ]
  
  IDLE_PERIOD_BULB_EXCLUSIONS.members.addAll(
  	newArrayList( switchFanLight1, switchFanLight2, switchDeskUplight, switchBedRoomCeiling, switchKitchenCeiling )
  )

  IDLE_PERIOD_BULB_EXCLUSIONS.members.addAll(
  	newArrayList( switchFanLight1, switchFanLight2, switchDeskUplight, switchBedRoomCeiling, switchKitchenCeiling )
  )
  
  HOME_CINEMA_BULB_EXCLUSIONS.members.addAll(
  	newArrayList( switchFanLight1, switchFanLight2, switchDeskUplight )
  )

  COMPUTER_WORK_BULB_EXCLUSIONS.members.addAll(
  	newArrayList( switchFanLight1, switchFanLight2, switchWindowUplight )
  )
  return null	
]

val Functions$Function0 defineIlluminateAllRoomsTimeouts = [|
  SCENES.members.forEach[ sceneDefinition |
  	postUpdate( ( sceneDefinition as GroupItem ).members.get( 1 ), 0 )
  ]
  
  postUpdate( IDLE_PERIOD_ILLUMINATE_ALL_ROOMS_TIMEOUT, 20 )
  return null
]

val Functions$Function0 defineBrightnessBoostOnHighActivity = [|
  SCENES.members.forEach[ sceneDefinition |
  	postUpdate( ( sceneDefinition as GroupItem ).members.get( 2 ), 0 )
  ]
  
  postUpdate( STANDARD_BRIGHTNESS_BOOST_ON_HIGH_ACTIVITY, 20 )
  postUpdate( COMPUTER_WORK_BRIGHTNESS_BOOST_ON_HIGH_ACTIVITY, 20 )
  postUpdate( HOME_CINEMA_BRIGHTNESS_BOOST_ON_HIGH_ACTIVITY, 20 )
  return null
]

val Functions$Function0 clearBulbExclusions = [|
  SCENES.members.forEach[ sceneDefinition |
  	( sceneDefinition as GroupItem ).members.forEach[ setting |
  	  if( setting instanceof GroupItem ) {
        ( setting as GroupItem ).members.clear
  	  }
  	]
  ]
  return null
]

val Functions$Function0 selectScene = [|
  SCENES.members.forEach[ sceneDefinition |
    if( sceneDefinition.name.equals( activeScene.state.toString ) ) {
      sceneSelection.members.set( 0, sceneDefinition )
  	}
  ]
  return null
]

rule "Wait for Initialization"
when
  System started
then
  lock.lock
  try {
    clearBulbExclusions.apply()
    defineBulbExclusions.apply()
    defineIlluminateAllRoomsTimeouts.apply()
    defineBrightnessBoostOnHighActivity.apply()
    postUpdate( sceneRulesReady, ON )
    logInfo( "scene", "Scene rules wait for rule system initialization..." )
  } finally {
    lock.unlock	
  }
end

rule "Scene Activation"
when
  Item activeScene changed
then
  if( initialized.state == ON ) {
    lock.lock
    try {
      logInfo( "Scene", "Select scene " + activeScene.state )

      if( initialized.state == ON ) {
        selectScene.apply()
      }
    } finally {
      lock.unlock	
    }
  }
end