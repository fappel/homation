import org.openhab.core.library.types.*
import java.lang.Math

import java.util.concurrent.locks.*

val Lock lock = new ReentrantLock()

// Constants
var Number K = 0.017453

// Change this reflecting your destination
var Number latitude = 49.006255
var Number longitude = 8.419463

//var int fastForwardHour = 0
//var int fastForwardMinute = 0

rule "Wait for Initialization"
when
  System started
then
  lock.lock
  try {
    postUpdate( sunRulesReady, ON )
    logInfo( "sun", "Sun rules wait for rule system initialization..." )
  } finally {
    lock.unlock	
  }
end

rule "Set Sun and Dawn States"
when
  Time cron "/50 * * * * ?"
//  Time cron "/1 * * * * ?"
then
  if( initialized.state == ON ) {
    var month  = now.getMonthOfYear
    var day    = now.getDayOfMonth
    var hour   = now.getHourOfDay
    var minute = now.getMinuteOfHour
//
//    fastForwardMinute = if( fastForwardMinute < 59 ) { fastForwardMinute + 20 } else { 0 }
//    if( fastForwardMinute == 60 ) {
//  	  fastForwardMinute = 0
//      fastForwardHour = if( fastForwardHour < 23 ) { fastForwardHour + 1 } else { 0 }
//    }
//    hour = fastForwardHour
//    minute = fastForwardMinute
//    logInfo( "sun.rules", "Time: " + hour + ":" + minute )

    // Source: http://www.jgiesen.de/SME/tk/index.htm
    var tageszahl = (month - 1) * 30 + day + hour / 24 
    var deklination = -23.45 * Math::cos((K * 360 * (tageszahl + 10) / 365).doubleValue)
    var zeitgleichung = 60.0 * (-0.171 * Math::sin((0.0337*tageszahl+0.465).doubleValue) - 0.1299 * Math::sin((0.01787*tageszahl-0.168).doubleValue))
    var stundenwinkel = 15.0 * (hour.doubleValue + (minute.doubleValue/60.0) - (15.0-longitude)/15.0 - 12.0 + zeitgleichung/60.0)
    var x = Math::sin((K * latitude).doubleValue()) * Math::sin((K * deklination).doubleValue()) + Math::cos((K * latitude).doubleValue()) * Math::cos((K * deklination).doubleValue()) * Math::cos((K * stundenwinkel).doubleValue())
    var sonnenhoehe = Math::asin(x.doubleValue) / K

    lock.lock
    try {
      sunHeight.postUpdate(sonnenhoehe)
    } finally {
      lock.unlock	
    }
  }
end